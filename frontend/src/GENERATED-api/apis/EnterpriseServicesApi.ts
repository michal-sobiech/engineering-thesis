/* tslint:disable */
/* eslint-disable */
/**
 * Engineering Thesis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject1,
  InlineObject4,
  ServiceSearchResponseItem,
} from '../models/index';
import {
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    ServiceSearchResponseItemFromJSON,
    ServiceSearchResponseItemToJSON,
} from '../models/index';

export interface SearchServicesRequest {
    preferredLongitude: number;
    preferredLatitude: number;
    cathegory: string;
    maxDistanceKm: number;
    serviceName?: string;
    enterpriseName?: string;
    startDate?: Date;
    endDate?: Date;
}

/**
 * 
 */
export class EnterpriseServicesApi extends runtime.BaseAPI {

    /**
     */
    async searchServicesRaw(requestParameters: SearchServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceSearchResponseItem>>> {
        if (requestParameters['preferredLongitude'] == null) {
            throw new runtime.RequiredError(
                'preferredLongitude',
                'Required parameter "preferredLongitude" was null or undefined when calling searchServices().'
            );
        }

        if (requestParameters['preferredLatitude'] == null) {
            throw new runtime.RequiredError(
                'preferredLatitude',
                'Required parameter "preferredLatitude" was null or undefined when calling searchServices().'
            );
        }

        if (requestParameters['cathegory'] == null) {
            throw new runtime.RequiredError(
                'cathegory',
                'Required parameter "cathegory" was null or undefined when calling searchServices().'
            );
        }

        if (requestParameters['maxDistanceKm'] == null) {
            throw new runtime.RequiredError(
                'maxDistanceKm',
                'Required parameter "maxDistanceKm" was null or undefined when calling searchServices().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['serviceName'] != null) {
            queryParameters['serviceName'] = requestParameters['serviceName'];
        }

        if (requestParameters['enterpriseName'] != null) {
            queryParameters['enterpriseName'] = requestParameters['enterpriseName'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['preferredLongitude'] != null) {
            queryParameters['preferredLongitude'] = requestParameters['preferredLongitude'];
        }

        if (requestParameters['preferredLatitude'] != null) {
            queryParameters['preferredLatitude'] = requestParameters['preferredLatitude'];
        }

        if (requestParameters['cathegory'] != null) {
            queryParameters['cathegory'] = requestParameters['cathegory'];
        }

        if (requestParameters['maxDistanceKm'] != null) {
            queryParameters['maxDistanceKm'] = requestParameters['maxDistanceKm'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/services/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceSearchResponseItemFromJSON));
    }

    /**
     */
    async searchServices(preferredLongitude: number, preferredLatitude: number, cathegory: string, maxDistanceKm: number, serviceName?: string, enterpriseName?: string, startDate?: Date, endDate?: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceSearchResponseItem>> {
        const response = await this.searchServicesRaw({ preferredLongitude: preferredLongitude, preferredLatitude: preferredLatitude, cathegory: cathegory, maxDistanceKm: maxDistanceKm, serviceName: serviceName, enterpriseName: enterpriseName, startDate: startDate, endDate: endDate }, initOverrides);
        return await response.value();
    }

}
