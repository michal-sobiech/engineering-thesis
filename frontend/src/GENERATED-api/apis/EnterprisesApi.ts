/* tslint:disable */
/* eslint-disable */
/**
 * Engineering Thesis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    CreateEnterpriseResponse,
    GetEnterpriseResponse,
    GetEnterpriseServicesResponseItem,
    Location
} from '../models/index';
import {
    CreateEnterpriseResponseFromJSON,
    GetEnterpriseResponseFromJSON,
    GetEnterpriseServicesResponseItemFromJSON,
    LocationToJSON
} from '../models/index';
import * as runtime from '../runtime';

export interface CreateEnterpriseRequest {
    name: string;
    description: string;
    address: string;
    longitude: number;
    latitude: number;
    logoFile?: Blob;
    backgroundPhotoFile?: Blob;
}

export interface GetEnterpriseRequest {
    enterpriseId: number;
}

export interface GetEnterpriseBackgroundPhotoRequest {
    enterpriseId: number;
}

export interface GetEnterpriseLogoPhotoRequest {
    enterpriseId: number;
}

export interface GetEnterpriseServicesRequest {
    enterpriseId: number;
}

export interface PatchEnterpriseRequest {
    enterpriseId: number;
    name?: string;
    description?: string;
    location?: Location;
    logoFile?: Blob;
    backgroundPhotoFile?: Blob;
}

/**
 * 
 */
export class EnterprisesApi extends runtime.BaseAPI {

    /**
     */
    async createEnterpriseRaw(requestParameters: CreateEnterpriseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEnterpriseResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling createEnterprise().'
            );
        }

        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling createEnterprise().'
            );
        }

        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling createEnterprise().'
            );
        }

        if (requestParameters['longitude'] == null) {
            throw new runtime.RequiredError(
                'longitude',
                'Required parameter "longitude" was null or undefined when calling createEnterprise().'
            );
        }

        if (requestParameters['latitude'] == null) {
            throw new runtime.RequiredError(
                'latitude',
                'Required parameter "latitude" was null or undefined when calling createEnterprise().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JwtBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        if (requestParameters['address'] != null) {
            formParams.append('address', requestParameters['address'] as any);
        }

        if (requestParameters['longitude'] != null) {
            formParams.append('longitude', requestParameters['longitude'] as any);
        }

        if (requestParameters['latitude'] != null) {
            formParams.append('latitude', requestParameters['latitude'] as any);
        }

        if (requestParameters['logoFile'] != null) {
            formParams.append('logoFile', requestParameters['logoFile'] as any);
        }

        if (requestParameters['backgroundPhotoFile'] != null) {
            formParams.append('backgroundPhotoFile', requestParameters['backgroundPhotoFile'] as any);
        }


        let urlPath = `/enterprises`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEnterpriseResponseFromJSON(jsonValue));
    }

    /**
     */
    async createEnterprise(name: string, description: string, address: string, longitude: number, latitude: number, logoFile?: Blob, backgroundPhotoFile?: Blob, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEnterpriseResponse> {
        const response = await this.createEnterpriseRaw({ name: name, description: description, address: address, longitude: longitude, latitude: latitude, logoFile: logoFile, backgroundPhotoFile: backgroundPhotoFile }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getEnterpriseRaw(requestParameters: GetEnterpriseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEnterpriseResponse>> {
        if (requestParameters['enterpriseId'] == null) {
            throw new runtime.RequiredError(
                'enterpriseId',
                'Required parameter "enterpriseId" was null or undefined when calling getEnterprise().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JwtBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enterprises/{enterpriseId}`;
        urlPath = urlPath.replace(`{${"enterpriseId"}}`, encodeURIComponent(String(requestParameters['enterpriseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEnterpriseResponseFromJSON(jsonValue));
    }

    /**
     */
    async getEnterprise(enterpriseId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEnterpriseResponse> {
        const response = await this.getEnterpriseRaw({ enterpriseId: enterpriseId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getEnterpriseBackgroundPhotoRaw(requestParameters: GetEnterpriseBackgroundPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['enterpriseId'] == null) {
            throw new runtime.RequiredError(
                'enterpriseId',
                'Required parameter "enterpriseId" was null or undefined when calling getEnterpriseBackgroundPhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/enteprises/{enterpriseId}/photos/background`;
        urlPath = urlPath.replace(`{${"enterpriseId"}}`, encodeURIComponent(String(requestParameters['enterpriseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async getEnterpriseBackgroundPhoto(enterpriseId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getEnterpriseBackgroundPhotoRaw({ enterpriseId: enterpriseId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getEnterpriseLogoPhotoRaw(requestParameters: GetEnterpriseLogoPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['enterpriseId'] == null) {
            throw new runtime.RequiredError(
                'enterpriseId',
                'Required parameter "enterpriseId" was null or undefined when calling getEnterpriseLogoPhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/enteprises/{enterpriseId}/photos/logo`;
        urlPath = urlPath.replace(`{${"enterpriseId"}}`, encodeURIComponent(String(requestParameters['enterpriseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async getEnterpriseLogoPhoto(enterpriseId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getEnterpriseLogoPhotoRaw({ enterpriseId: enterpriseId }, initOverrides);
        return await response.value();
    }

    /**
     * Get enterprise employees
     */
    async getEnterpriseServicesRaw(requestParameters: GetEnterpriseServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetEnterpriseServicesResponseItem>>> {
        if (requestParameters['enterpriseId'] == null) {
            throw new runtime.RequiredError(
                'enterpriseId',
                'Required parameter "enterpriseId" was null or undefined when calling getEnterpriseServices().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/enterprises/{enterpriseId}/services`;
        urlPath = urlPath.replace(`{${"enterpriseId"}}`, encodeURIComponent(String(requestParameters['enterpriseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetEnterpriseServicesResponseItemFromJSON));
    }

    /**
     * Get enterprise employees
     */
    async getEnterpriseServices(enterpriseId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetEnterpriseServicesResponseItem>> {
        const response = await this.getEnterpriseServicesRaw({ enterpriseId: enterpriseId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchEnterpriseRaw(requestParameters: PatchEnterpriseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['enterpriseId'] == null) {
            throw new runtime.RequiredError(
                'enterpriseId',
                'Required parameter "enterpriseId" was null or undefined when calling patchEnterprise().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JwtBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        if (requestParameters['location'] != null) {
            formParams.append('location', new Blob([JSON.stringify(LocationToJSON(requestParameters['location']))], { type: "application/json", }));
        }

        if (requestParameters['logoFile'] != null) {
            formParams.append('logoFile', requestParameters['logoFile'] as any);
        }

        if (requestParameters['backgroundPhotoFile'] != null) {
            formParams.append('backgroundPhotoFile', requestParameters['backgroundPhotoFile'] as any);
        }


        let urlPath = `/enterprises/{enterpriseId}/patch`;
        urlPath = urlPath.replace(`{${"enterpriseId"}}`, encodeURIComponent(String(requestParameters['enterpriseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async patchEnterprise(enterpriseId: number, name?: string, description?: string, location?: Location, logoFile?: Blob, backgroundPhotoFile?: Blob, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchEnterpriseRaw({ enterpriseId: enterpriseId, name: name, description: description, location: location, logoFile: logoFile, backgroundPhotoFile: backgroundPhotoFile }, initOverrides);
    }

}
