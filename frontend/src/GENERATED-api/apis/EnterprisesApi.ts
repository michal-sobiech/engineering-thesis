/* tslint:disable */
/* eslint-disable */
/**
 * Engineering Thesis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEnterpriseRequest,
  CreateEnterpriseResponse,
  GetEnterpriseResponse,
  InlineObject,
  InlineObject1,
  InlineObject2,
  InlineObject4,
} from '../models/index';
import {
    CreateEnterpriseRequestFromJSON,
    CreateEnterpriseRequestToJSON,
    CreateEnterpriseResponseFromJSON,
    CreateEnterpriseResponseToJSON,
    GetEnterpriseResponseFromJSON,
    GetEnterpriseResponseToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
} from '../models/index';

export interface CreateEnterpriseOperationRequest {
    createEnterpriseRequest: CreateEnterpriseRequest;
}

export interface GetEnterpriseRequest {
    enterpriseId: number;
}

/**
 * 
 */
export class EnterprisesApi extends runtime.BaseAPI {

    /**
     */
    async createEnterpriseRaw(requestParameters: CreateEnterpriseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEnterpriseResponse>> {
        if (requestParameters['createEnterpriseRequest'] == null) {
            throw new runtime.RequiredError(
                'createEnterpriseRequest',
                'Required parameter "createEnterpriseRequest" was null or undefined when calling createEnterprise().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JwtBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enterprises`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEnterpriseRequestToJSON(requestParameters['createEnterpriseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEnterpriseResponseFromJSON(jsonValue));
    }

    /**
     */
    async createEnterprise(createEnterpriseRequest: CreateEnterpriseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEnterpriseResponse> {
        const response = await this.createEnterpriseRaw({ createEnterpriseRequest: createEnterpriseRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getEnterpriseRaw(requestParameters: GetEnterpriseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEnterpriseResponse>> {
        if (requestParameters['enterpriseId'] == null) {
            throw new runtime.RequiredError(
                'enterpriseId',
                'Required parameter "enterpriseId" was null or undefined when calling getEnterprise().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JwtBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enterprises/{enterpriseId}`;
        urlPath = urlPath.replace(`{${"enterpriseId"}}`, encodeURIComponent(String(requestParameters['enterpriseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEnterpriseResponseFromJSON(jsonValue));
    }

    /**
     */
    async getEnterprise(enterpriseId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEnterpriseResponse> {
        const response = await this.getEnterpriseRaw({ enterpriseId: enterpriseId }, initOverrides);
        return await response.value();
    }

}
