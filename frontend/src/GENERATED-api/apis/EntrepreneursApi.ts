/* tslint:disable */
/* eslint-disable */
/**
 * Engineering Thesis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    CreateIndependentEndUserRequest,
    GetEntrepreneurEnterprisesResponseItem,
    IndependentEndUserGetMeResponse
} from '../models/index';
import {
    CreateIndependentEndUserRequestToJSON,
    GetEntrepreneurEnterprisesResponseItemFromJSON,
    IndependentEndUserGetMeResponseFromJSON
} from '../models/index';
import * as runtime from '../runtime';

export interface CreateEntrepreneurRequest {
    createIndependentEndUserRequest: CreateIndependentEndUserRequest;
}

export interface GetEntrepreneurEnterprisesRequest {
    userId: number;
}

/**
 * 
 */
export class EntrepreneursApi extends runtime.BaseAPI {

    /**
     * Create an entrepreneur
     */
    async createEntrepreneurRaw(requestParameters: CreateEntrepreneurRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createIndependentEndUserRequest'] == null) {
            throw new runtime.RequiredError(
                'createIndependentEndUserRequest',
                'Required parameter "createIndependentEndUserRequest" was null or undefined when calling createEntrepreneur().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/entrepreneurs`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateIndependentEndUserRequestToJSON(requestParameters['createIndependentEndUserRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create an entrepreneur
     */
    async createEntrepreneur(createIndependentEndUserRequest: CreateIndependentEndUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createEntrepreneurRaw({ createIndependentEndUserRequest: createIndependentEndUserRequest }, initOverrides);
    }

    /**
     */
    async getEntrepreneurEnterprisesRaw(requestParameters: GetEntrepreneurEnterprisesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetEntrepreneurEnterprisesResponseItem>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getEntrepreneurEnterprises().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/entrepreneurs/{userId}/enterprises`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetEntrepreneurEnterprisesResponseItemFromJSON));
    }

    /**
     */
    async getEntrepreneurEnterprises(userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetEntrepreneurEnterprisesResponseItem>> {
        const response = await this.getEntrepreneurEnterprisesRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMeEntrepreneurRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndependentEndUserGetMeResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JwtBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/entrepreneurs/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndependentEndUserGetMeResponseFromJSON(jsonValue));
    }

    /**
     */
    async getMeEntrepreneur(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndependentEndUserGetMeResponse> {
        const response = await this.getMeEntrepreneurRaw(initOverrides);
        return await response.value();
    }

}
