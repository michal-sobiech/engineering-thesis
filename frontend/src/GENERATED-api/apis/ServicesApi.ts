/* tslint:disable */
/* eslint-disable */
/**
 * Engineering Thesis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetServiceFreeCustomAppointmentsResponseItem,
  GetServiceFreeNonCustomAppointmentsResponseItem,
  InlineObject,
  InlineObject1,
  InlineObject2,
  InlineObject4,
} from '../models/index';
import {
    GetServiceFreeCustomAppointmentsResponseItemFromJSON,
    GetServiceFreeCustomAppointmentsResponseItemToJSON,
    GetServiceFreeNonCustomAppointmentsResponseItemFromJSON,
    GetServiceFreeNonCustomAppointmentsResponseItemToJSON,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
} from '../models/index';

export interface GetFreeCustomAppointmentsRequest {
    serviceId: number;
}

export interface GetFreeNonCustomAppointmentsRequest {
    serviceId: number;
}

/**
 * 
 */
export class ServicesApi extends runtime.BaseAPI {

    /**
     */
    async getFreeCustomAppointmentsRaw(requestParameters: GetFreeCustomAppointmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetServiceFreeCustomAppointmentsResponseItem>>> {
        if (requestParameters['serviceId'] == null) {
            throw new runtime.RequiredError(
                'serviceId',
                'Required parameter "serviceId" was null or undefined when calling getFreeCustomAppointments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/services/{serviceId}/custom-appointments/free`;
        urlPath = urlPath.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters['serviceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetServiceFreeCustomAppointmentsResponseItemFromJSON));
    }

    /**
     */
    async getFreeCustomAppointments(serviceId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetServiceFreeCustomAppointmentsResponseItem>> {
        const response = await this.getFreeCustomAppointmentsRaw({ serviceId: serviceId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFreeNonCustomAppointmentsRaw(requestParameters: GetFreeNonCustomAppointmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetServiceFreeNonCustomAppointmentsResponseItem>>> {
        if (requestParameters['serviceId'] == null) {
            throw new runtime.RequiredError(
                'serviceId',
                'Required parameter "serviceId" was null or undefined when calling getFreeNonCustomAppointments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/services/{serviceId}/non-custom-appointments/free`;
        urlPath = urlPath.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters['serviceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetServiceFreeNonCustomAppointmentsResponseItemFromJSON));
    }

    /**
     */
    async getFreeNonCustomAppointments(serviceId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetServiceFreeNonCustomAppointmentsResponseItem>> {
        const response = await this.getFreeNonCustomAppointmentsRaw({ serviceId: serviceId }, initOverrides);
        return await response.value();
    }

}
