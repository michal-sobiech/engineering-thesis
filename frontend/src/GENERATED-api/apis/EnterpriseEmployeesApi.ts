/* tslint:disable */
/* eslint-disable */
/**
 * Engineering Thesis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    CheckIndependentEndUserEmailExists200Response,
    CreateEnterpriseEmployeeRequest,
    CreateEnterpriseEmployeeResponse
} from '../models/index';
import {
    CheckIndependentEndUserEmailExists200ResponseFromJSON,
    CreateEnterpriseEmployeeRequestToJSON,
    CreateEnterpriseEmployeeResponseFromJSON
} from '../models/index';
import * as runtime from '../runtime';

export interface CheckEmployeeUsernameExistsRequest {
    enterpriseId: number;
    username: string;
}

export interface CreateEnterpriseEmployeeOperationRequest {
    enterpriseId: number;
    createEnterpriseEmployeeRequest: CreateEnterpriseEmployeeRequest;
}

/**
 * 
 */
export class EnterpriseEmployeesApi extends runtime.BaseAPI {

    /**
     */
    async checkEmployeeUsernameExistsRaw(requestParameters: CheckEmployeeUsernameExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckIndependentEndUserEmailExists200Response>> {
        if (requestParameters['enterpriseId'] == null) {
            throw new runtime.RequiredError(
                'enterpriseId',
                'Required parameter "enterpriseId" was null or undefined when calling checkEmployeeUsernameExists().'
            );
        }

        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling checkEmployeeUsernameExists().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JwtBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enterprises/{enterpriseId}/employees/exists`;
        urlPath = urlPath.replace(`{${"enterpriseId"}}`, encodeURIComponent(String(requestParameters['enterpriseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckIndependentEndUserEmailExists200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async checkEmployeeUsernameExists(enterpriseId: number, username: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckIndependentEndUserEmailExists200Response> {
        const response = await this.checkEmployeeUsernameExistsRaw({ enterpriseId: enterpriseId, username: username }, initOverrides);
        return await response.value();
    }

    /**
     * Create enterprise employee
     */
    async createEnterpriseEmployeeRaw(requestParameters: CreateEnterpriseEmployeeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEnterpriseEmployeeResponse>> {
        if (requestParameters['enterpriseId'] == null) {
            throw new runtime.RequiredError(
                'enterpriseId',
                'Required parameter "enterpriseId" was null or undefined when calling createEnterpriseEmployee().'
            );
        }

        if (requestParameters['createEnterpriseEmployeeRequest'] == null) {
            throw new runtime.RequiredError(
                'createEnterpriseEmployeeRequest',
                'Required parameter "createEnterpriseEmployeeRequest" was null or undefined when calling createEnterpriseEmployee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JwtBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enterprises/{enterpriseId}/employees`;
        urlPath = urlPath.replace(`{${"enterpriseId"}}`, encodeURIComponent(String(requestParameters['enterpriseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEnterpriseEmployeeRequestToJSON(requestParameters['createEnterpriseEmployeeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEnterpriseEmployeeResponseFromJSON(jsonValue));
    }

    /**
     * Create enterprise employee
     */
    async createEnterpriseEmployee(enterpriseId: number, createEnterpriseEmployeeRequest: CreateEnterpriseEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEnterpriseEmployeeResponse> {
        const response = await this.createEnterpriseEmployeeRaw({ enterpriseId: enterpriseId, createEnterpriseEmployeeRequest: createEnterpriseEmployeeRequest }, initOverrides);
        return await response.value();
    }

}
