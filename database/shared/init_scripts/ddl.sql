CREATE SEQUENCE public.user_id_seq
	INCREMENT BY 1
	MINVALUE 0
	MAXVALUE 9223372036854775807
	START 0
	CACHE 1
	NO CYCLE;

CREATE TYPE independent_end_user_type AS ENUM ('customer', 'entrepreneur');

CREATE TYPE currency_iso AS ENUM ('PLN', 'USD');

CREATE TABLE public.independent_end_user (
	independent_end_user_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	user_id bigint DEFAULT nextval('user_id_seq'::regclass) NOT NULL,

	independent_end_user_type independent_end_user_type NOT NULL,
	first_name text NOT NULL,
	last_name text NOT NULL,
	password_hash text NOT NULL,
	email text NOT NULL,

	CONSTRAINT pk_independent_end_user_independent_end_user_id PRIMARY KEY (independent_end_user_id),
	CONSTRAINT uk_independent_end_user_user_id UNIQUE (user_id),
	CONSTRAINT uk_independent_end_user_email UNIQUE (email)
);

CREATE TABLE public.enterprise (
	enterprise_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	owner_independent_end_user_id bigint NOT NULL,

	"name" text NOT NULL,
	"description" text NOT NULL,

	"address" text,
	latitude double PRECISION,
	longitude double PRECISION,

	logo_file_name text,
	logo_file_byes bytea,

	background_photo_file_name text,
	background_photo_file_byes bytea,

	CONSTRAINT pk_enterprise PRIMARY KEY (enterprise_id),
	CONSTRAINT chk_location CHECK (
		("address" IS NULL AND latitude IS NULL AND longitude IS NULL)
		OR
		("address" IS NOT NULL AND latitude IS NOT NULL AND longitude IS NOT NULL)
	),
	CONSTRAINT fk_enterprise_owner_independent_end_user_id FOREIGN KEY (owner_independent_end_user_id) REFERENCES public.independent_end_user(independent_end_user_id) ON DELETE CASCADE
);

CREATE TABLE public.enterprise_service (
	enterprise_service_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	enterprise_id bigint NOT NULL,

	"name" text NOT NULL,
	"description" text NOT NULL,

	"address" text,
	latitude double PRECISION,
	longitude double PRECISION,

	time_zone text NOT NULL,
	takes_custom_appointments boolean NOT NULL,
	price numeric NOT NULL,
	currency currency_iso NOT NULL,

	CONSTRAINT pk_enterprise_service PRIMARY KEY (enterprise_service_id),
	CONSTRAINT fk_enterprise_id FOREIGN KEY (enterprise_id) REFERENCES public.enterprise(enterprise_id) ON DELETE CASCADE,
	CONSTRAINT chk_enteprise_service_location CHECK (
		(address IS NULL and latitude IS NULL AND longitude IS NULL)
		OR
		(address IS NOT NULL and latitude IS NOT NULL AND longitude IS NOT NULL)
	)
);

CREATE TABLE public.enterprise_service_slot (
	enterprise_service_slot_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	enterprise_service_id bigint NOT NULL,

	day_of_week smallint NOT NULL,
	start_time timestamptz NOT NULL,
	end_time timestamptz NOT NULL,
	
	CONSTRAINT pk_enterprise_service_slot PRIMARY KEY (enterprise_service_slot_id),
	CONSTRAINT fk_enterprise_service_id FOREIGN KEY (enterprise_service_id) REFERENCES public.enterprise_service(enterprise_service_id) ON DELETE CASCADE,
	CONSTRAINT chk_enteprise_service_slot_day_of_week CHECK (day_of_week BETWEEN 1 AND 7)
);

CREATE TABLE public.employee (
	employee_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	enterprise_id bigint NOT NULL,
	user_id bigint DEFAULT nextval('user_id_seq'::regclass) NOT NULL,

	first_name text NOT NULL,
	last_name text NOT NULL,
	username text NOT NULL,
	password_hash text NOT NULL,

	CONSTRAINT pk_employee PRIMARY KEY (employee_id),
	CONSTRAINT uk_employee_user_id UNIQUE (user_id),
	CONSTRAINT uk_employee_username UNIQUE (username),
	CONSTRAINT fk_employee_enterprise_id FOREIGN KEY (enterprise_id) REFERENCES public.enterprise(enterprise_id) ON DELETE CASCADE
);

CREATE TYPE admin_type AS ENUM ('regular', 'head');

CREATE TABLE public."admin" (
	admin_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	user_id bigint DEFAULT nextval('user_id_seq'::regclass) NOT NULL,

 	admin_type admin_type NOT NULL,
	first_name text NOT NULL,
	last_name text NOT NULL,
	username text NOT NULL,
	password_hash text NOT NULL,

	CONSTRAINT pk_admin PRIMARY KEY (admin_id),
	CONSTRAINT uk_admin_user_id UNIQUE (user_id)
);

CREATE TABLE public.review (
	review_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	creator_customer_independent_end_user_id bigint NOT NULL,
	subject_enterprise_id bigint NOT NULL,

	CONSTRAINT pk_review_id PRIMARY KEY (review_id),
	CONSTRAINT fk_review_creator_customer_independent_end_user_id FOREIGN KEY (creator_customer_independent_end_user_id) REFERENCES public.independent_end_user(independent_end_user_id) ON DELETE CASCADE,
	CONSTRAINT fk_review_subject_enterprise_id FOREIGN KEY (subject_enterprise_id) REFERENCES public.enterprise(enterprise_id) ON DELETE CASCADE
);

CREATE TABLE public.appointment (
	appointment_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	enterprise_service_id bigint NOT NULL,

	start_time timestamptz NOT NULL,
	end_time timestamptz NOT NULL,

	CONSTRAINT pk_appointment_id PRIMARY KEY (appointment_id),
	CONSTRAINT fk_appointment_enterprise_service_id FOREIGN KEY (enterprise_service_id) REFERENCES public.enterprise_service(enterprise_service_id) ON DELETE CASCADE
);

CREATE TABLE public."report" (
	report_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,

	enterprise_id bigint,
	enterprise_service_id bigint,
	review_id bigint,

	message text NOT NULL,
	hidden_by_admin boolean NOT NULL,

	CONSTRAINT pk_report PRIMARY KEY (report_id),
	CONSTRAINT fk_report_enterprise_id FOREIGN KEY (enterprise_id) REFERENCES public.enterprise(enterprise_id) ON DELETE CASCADE,
	CONSTRAINT fk_report_enterprise_service_id FOREIGN KEY (enterprise_service_id) REFERENCES public.enterprise_service(enterprise_service_id) ON DELETE CASCADE,
	CONSTRAINT fk_report_review_id FOREIGN KEY (review_id) REFERENCES public.review(review_id) ON DELETE CASCADE,
	CONSTRAINT chk_report_subject CHECK (
		(enterprise_id IS NOT NULL AND enterprise_service_id IS     NULL AND review_id IS     NULL)
		OR
		(enterprise_id IS 	  NULL AND enterprise_service_id IS NOT NULL AND review_id IS     NULL)
		OR
		(enterprise_id IS     NULL AND enterprise_service_id IS     NULL AND review_id IS NOT NULL)
	)
);