CREATE TYPE user_group AS ENUM ('customer', 'entrepreneur', 'employee', 'regular_admin', 'head_admin');

CREATE TYPE currency_iso AS ENUM ('PLN', 'USD');

CREATE TYPE enterprise_service_cathegory AS ENUM (
	'BEAUTY_AND_WELLNESS',
    'HAIRDRESSER',
    'BARBER',

    'FAMILY_MEDICINE',
    'INTERNIST',
    'PEDIATRICS',
    'PSYCHIATRY',
    'STOMATOGLOGY',
    'GYNECOLOGY',

    'HANDYMAN',
    'PLUMBER',
    'ELECTRICICAN'
);

CREATE TABLE public.enterprise (
	enterprise_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	owner_user_id bigint NOT NULL,

	"name" text NOT NULL,
	"description" text NOT NULL,

	"address" text,
	latitude double PRECISION,
	longitude double PRECISION,

	logo_file_name text,
	logo_file_bytes bytea,

	background_photo_file_name text,
	background_photo_file_bytes bytea,

	CONSTRAINT pk_enterprise PRIMARY KEY (enterprise_id),
	CONSTRAINT chk_location CHECK (
		("address" IS NULL AND latitude IS NULL AND longitude IS NULL)
		OR
		("address" IS NOT NULL AND latitude IS NOT NULL AND longitude IS NOT NULL)
	)
);

CREATE TABLE public.user (
	user_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,

	user_group user_group NOT NULL,
	username text NOT NULL,

	first_name text NOT NULL,
	last_name text NOT NULL,
	password_hash text NOT NULL,
	
	enterprise_id bigint,

	CONSTRAINT pk_user_id PRIMARY KEY (user_id),
	CONSTRAINT chk_user_enterprise_id CHECK (
		(user_group = 'employee' AND enterprise_id IS NOT NULL)
		OR
		(user_group != 'employee' AND enterprise_id IS NULL)
	),
	CONSTRAINT fk_user_enterprise_id FOREIGN KEY (enterprise_id) REFERENCES public.enterprise(enterprise_id) ON DELETE CASCADE
);

ALTER TABLE public.enterprise
	ADD CONSTRAINT fk_enterprise_owner_user_id FOREIGN KEY (owner_user_id) REFERENCES public.user(user_id) ON DELETE CASCADE;

CREATE UNIQUE INDEX ux_user_independent_end_user_usernames ON public.user(username) WHERE user_group IN ('customer', 'entrepreneur');
CREATE UNIQUE INDEX ux_user_admin_usernames ON public.user(username) WHERE user_group IN ('regular_admin', 'head_admin');
CREATE UNIQUE INDEX ux_user_employee_usernames ON public.user(enterprise_id, username) WHERE user_group IN ('employee');

CREATE TABLE public.enterprise_service (
	enterprise_service_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	enterprise_id bigint NOT NULL,

	"name" text NOT NULL,
	"description" text NOT NULL,

	"address" text NOT NULL,
	latitude double PRECISION NOT NULL,
	longitude double PRECISION NOT NULL,

	time_zone text NOT NULL,

	takes_custom_appointments boolean NOT NULL,
	max_distance_km double PRECISION,

	price numeric NOT NULL,
	currency currency_iso NOT NULL,
	enterprise_service_cathegory enterprise_service_cathegory NOT NULL,

	CONSTRAINT pk_enterprise_service PRIMARY KEY (enterprise_service_id),
	CONSTRAINT fk_enterprise_id FOREIGN KEY (enterprise_id) REFERENCES public.enterprise(enterprise_id) ON DELETE CASCADE,
	CONSTRAINT chk_max_distance_km CHECK (
		(takes_custom_appointments = FALSE AND max_distance_km IS NULL)
		OR
		(takes_custom_appointments = TRUE AND max_distance_km IS NOT NULL)
	)
);

CREATE TABLE public.enterprise_service_slot (
	enterprise_service_slot_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	enterprise_service_id bigint NOT NULL,

	day_of_week smallint NOT NULL,
	start_time time NOT NULL,
	end_time time NOT NULL,
	
	CONSTRAINT pk_enterprise_service_slot PRIMARY KEY (enterprise_service_slot_id),
	CONSTRAINT fk_enterprise_service_id FOREIGN KEY (enterprise_service_id) REFERENCES public.enterprise_service(enterprise_service_id) ON DELETE CASCADE,
	CONSTRAINT chk_enteprise_service_slot_day_of_week CHECK (day_of_week BETWEEN 1 AND 7)
);

CREATE TABLE public.review (
	review_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	creator_customer_user_id bigint NOT NULL,
	subject_enterprise_id bigint NOT NULL,

	stars_out_of_5 smallint NOT NULL,
	content text,
	hidden_by_admin boolean NOT NULL,

	CONSTRAINT pk_review_id PRIMARY KEY (review_id),
	CONSTRAINT fk_review_creator_customer_user_id FOREIGN KEY (creator_customer_user_id) REFERENCES public.user(user_id) ON DELETE CASCADE,
	CONSTRAINT fk_review_subject_enterprise_id FOREIGN KEY (subject_enterprise_id) REFERENCES public.enterprise(enterprise_id) ON DELETE CASCADE,
	CONSTRAINT chk_review_stars_out_of_5 CHECK (stars_out_of_5 BETWEEN 1 AND 5)
);

CREATE TABLE public.appointment (
	appointment_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	enterprise_service_id bigint NOT NULL,
	customer_user_id bigint NOT NULL,

	start_time timestamptz NOT NULL,
	end_time timestamptz NOT NULL,

	CONSTRAINT pk_appointment_id PRIMARY KEY (appointment_id),
	CONSTRAINT fk_appointment_enterprise_service_id FOREIGN KEY (enterprise_service_id) REFERENCES public.enterprise_service(enterprise_service_id) ON DELETE CASCADE,
	CONSTRAINT fk_appointment_customer_user_id FOREIGN KEY (customer_user_id) REFERENCES public.user(user_id) ON DELETE CASCADE
);

CREATE TABLE public."report" (
	report_id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	creator_user_id bigint NOT NULL,

	enterprise_id bigint,
	enterprise_service_id bigint,
	review_id bigint,

	CONSTRAINT pk_report PRIMARY KEY (report_id),
	CONSTRAINT fk_report_enterprise_id FOREIGN KEY (enterprise_id) REFERENCES public.enterprise(enterprise_id) ON DELETE CASCADE,
	CONSTRAINT fk_report_enterprise_service_id FOREIGN KEY (enterprise_service_id) REFERENCES public.enterprise_service(enterprise_service_id) ON DELETE CASCADE,
	CONSTRAINT fk_report_review_id FOREIGN KEY (review_id) REFERENCES public.review(review_id) ON DELETE CASCADE,
	CONSTRAINT fk_report_creator_user_id FOREIGN KEY (creator_user_id) REFERENCES public.user(user_id) ON DELETE CASCADE,
	CONSTRAINT chk_report_subject CHECK (
		(enterprise_id IS NOT NULL AND enterprise_service_id IS     NULL AND review_id IS     NULL)
		OR
		(enterprise_id IS 	  NULL AND enterprise_service_id IS NOT NULL AND review_id IS     NULL)
		OR
		(enterprise_id IS     NULL AND enterprise_service_id IS     NULL AND review_id IS NOT NULL)
	)
);