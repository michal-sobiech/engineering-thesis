openapi: 3.1.1
info:
  title: Engineering Thesis API
  version: 1.0.0

servers:
  - url: http://localhost:8080

components:
  securitySchemes:
    JwtBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CreateIndependentEndUserRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          example: Jan
        lastName:
          type: string
          example: Kowalski
        email:
          type: string
          example: jan.kowalski@test.com
        password:
          type: string
          format: password
          example: "5=2VPIzYHSIc0l4d1o&es]plB"
    CreateIndependentEndUserResponse:
      type: object
      required:
        - accessToken
        - user
      properties:
        accessToken:
          type: string
          format: password
        user:
          type: object
          required:
            - firstName
            - lastName
            - email
          properties:
            firstName:
              type: string
              example: Jan
            lastName:
              type: string
              example: Kowalski
            email:
              type: string
              example: jan.kowalski@test.com
    LogInIndependentEndUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: jan.kowalski@test.com
        password:
          type: string
          format: password
          example: "5=2VPIzYHSIc0l4d1o&es]plB"
    LogInIndependentEndUserResponse:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
          format: password
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMywiaXNzdWVkX2F0IjoxNzU3NTkyMDIyLCJleHBpcmVzX2F0IjoxNzU3NjEzNjIyfQ.R0wpPhA5v-z_NYELi8PLxji0EJFcD75B5_psMb8ZNcc"
    GetEntrepreneurEnterprisesResponseItem:
      type: object
      required:
        - name
        - id
      properties:
        name:
          type: string
          example: Hair Beauty Salon
        id:
          type: integer
          format: int64
          example: 123
    GetEntrepreneurEnterprisesResponse:
      type: array
      items:
        $ref: "#/components/schemas/GetEntrepreneurEnterprisesResponseItem"
    EntrepreneurGetMeResponse:
      type: object
      required: [entrepreneurId, email, firstName, lastName]
      properties:
        entrepreneurId:
          type: integer
          format: int64
          example: 234
        email:
          type: string
          example: jan.kowalski@test.com
        firstName:
          type: string
          example: Jan
        lastName:
          type: string
          example: Kowalski
    EmployeeGetMeResponse:
      type: object
      required:
        [userId, employeeId, enterpriseId, username, firstName, lastName]
      properties:
        userId:
          type: integer
          format: int64
          example: 1234
        employeeId:
          type: integer
          format: int64
          example: 234
        enterpriseId:
          type: integer
          format: int64
          example: 111
        username:
          type: string
          example: jan.kowalski.1
        firstName:
          type: string
          example: Jan
        lastName:
          type: string
          example: Kowalski
    CreateEnterpriseRequest:
      type: object
      required: [enterpriseName, description, location]
      properties:
        enterpriseName:
          type: string
          example: The Best Barbershop
        description:
          type: string
          example: The new best barbershop in town.
        location:
          type: string
          example: ul. Nowowiejska 15/19, Warasaw, Poland
    CreateEnterpriseResponse:
      type: object
      required: [enterpriseId]
      properties:
        enterpriseId:
          type: integer
          format: int64
          example: 345
    GetEnterpriseResponse:
      type: object
      required: [enterpriseName, description, location]
      properties:
        enterpriseName:
          type: string
          example: The Best Barbershop
        description:
          type: string
          example: The new best barbershop in town.
        location:
          type: string
          example: ul. Nowowiejska 15/19, Warasaw, Poland
    CreateEnterpriseEmployeeRequest:
      type: object
      required:
        - firstName
        - lastName
        - username
        - password
      properties:
        firstName:
          type: string
          example: Jan
        lastName:
          type: string
          example: Kowalski
        username:
          type: string
          example: jan.kowalski.1
        password:
          type: string
          format: password
          example: "5=2VPIzYHSIc0l4d1o&es]plB"
    CreateEnterpriseEmployeeResponse:
      type: object
      required:
        - accessToken
        - user
      properties:
        accessToken:
          type: string
          format: password
        user:
          type: object
          required:
            - firstName
            - lastName
            - username
          properties:
            firstName:
              type: string
              example: Jan
            lastName:
              type: string
              example: Kowalski
            username:
              type: string
              example: jan.kowalski.1
    LogInEnterpriseEmployeeRequest:
      type: object
      required:
        - enterpriseId
        - username
        - password
      properties:
        enterpriseId:
          type: number
          example: 123
        username:
          type: string
          example: jan.kowalski.1
        password:
          type: string
          format: password
          example: "5=2VPIzYHSIc0l4d1o&es]plB"
    LogInEnterpriseEmployeeResponse:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
          format: password
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMywiaXNzdWVkX2F0IjoxNzU3NTkyMDIyLCJleHBpcmVzX2F0IjoxNzU3NjEzNjIyfQ.R0wpPhA5v-z_NYELi8PLxji0EJFcD75B5_psMb8ZNcc"

  responses:
    OK:
      description: &OK_DESCRIPTION >
        Ok
    Created:
      description: &CREATED_DESCRIPTION >
        Created resource
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: Unauthorized
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: Bad request
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: Internal server error

paths:
  /independent-end-users:
    post:
      tags: [IndependentEndUsers]
      operationId: createIndependentEndUser
      summary: Create an independent end user
      security: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIndependentEndUserRequest"
      responses:
        "201":
          description: *CREATED_DESCRIPTION
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateIndependentEndUserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /independent-end-users/exists:
    get:
      tags: [IndependentEndUsers]
      operationId: checkIndependentEndUserEmailExists
      security: []
      parameters:
        - description: Email to check
          in: query
          name: email
          required: true
          schema:
            type: string
            format: email
      responses:
        "200":
          description: *OK_DESCRIPTION
          content:
            application/json:
              schema:
                type: object
                properties:
                  isExisting:
                    type: boolean
                required: [isExisting]
              examples:
                yes:
                  value:
                    isExisting: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /auth/independent-end-user/log-in:
    post:
      tags: [Auth]
      operationId: logInIndependentEndUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogInIndependentEndUserRequest"
      responses:
        "200":
          description: *OK_DESCRIPTION
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogInIndependentEndUserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /auth/enterprise-employee/log-in:
    post:
      tags: [Auth]
      operationId: logInEnterpriseEmployee
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogInEnterpriseEmployeeRequest"
      responses:
        "200":
          description: *OK_DESCRIPTION
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogInEnterpriseEmployeeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /entrepreneurs/{entrepreneurId}/enterprises:
    get:
      tags: [Entrepreneurs]
      operationId: getEntrepreneurEnterprises
      security:
        - JwtBearerAuth: []
      parameters:
        - name: entrepreneurId
          in: path
          required: true
          description: Entrepreneur id
          schema:
            type: integer
      responses:
        "200":
          description: *OK_DESCRIPTION
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEntrepreneurEnterprisesResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /enterprise-employee/me:
    get:
      tags: [EnterpriseEmployees]
      operationId: getMe
      security:
        - JwtBearerAuth: []
      responses:
        "200":
          description: *OK_DESCRIPTION
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeGetMeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /enterprises:
    post:
      tags: [Enterprises]
      operationId: createEnterprise
      security:
        - JwtBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEnterpriseRequest"
      responses:
        "201":
          description: *CREATED_DESCRIPTION
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateEnterpriseResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /enterprises/{enterpriseId}:
    get:
      tags: [Enterprises]
      operationId: getEnterprise
      parameters:
        - name: enterpriseId
          in: path
          required: true
          description: Enterprise id
          schema:
            type: integer
      responses:
        "200":
          description: *OK_DESCRIPTION
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnterpriseResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /enterprises/{enterpriseId}/employees/exists:
    get:
      tags: [EnterpriseEmployees]
      operationId: checkEmployeeUsernameExists
      security:
        - JwtBearerAuth: []
      parameters:
        - name: enterpriseId
          in: path
          required: true
          description: Enterprise id
          schema:
            type: integer
        - description: Username to check
          in: query
          name: username
          required: true
          schema:
            type: string
            example: jan.kowalski.1
      responses:
        "200":
          description: *OK_DESCRIPTION
          content:
            application/json:
              schema:
                type: object
                properties:
                  isExisting:
                    type: boolean
                required: [isExisting]
              examples:
                yes:
                  value:
                    isExisting: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /enterprises/{enterpriseId}/employees:
    post:
      tags: [EnterpriseEmployees]
      operationId: createEnterpriseEmployee
      summary: Create enterprise employee
      security:
        - JwtBearerAuth: []
      parameters:
        - name: enterpriseId
          in: path
          required: true
          description: Enterprise id
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEnterpriseEmployeeRequest"
      responses:
        "201":
          description: *CREATED_DESCRIPTION
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateEnterpriseEmployeeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
