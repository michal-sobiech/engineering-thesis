x-backend-shared-config: &backend_shared_config
  build:
    context: ..
    dockerfile: ./docker/Dockerfile.backend
  environment:
    DB_NAME: ${DB_NAME}
    DB_USER: ${DB_BE_USER}
    DB_PASSWORD: ${DB_BE_PASSWORD}
    FRONTEND_HOST: http://localhost:3000 # TODO put this in .env or somewhere like that
  depends_on:
    database_primary:
      condition: service_healthy
    database_replica:
      condition: service_healthy
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost/health-check"]
    interval: 30s
    timeout: 10s
    retries: 10
    start_period: 10s
    start_interval: 3s
  networks:
    - nginx_and_backend
    - backend_and_database

x-database-shared-config: &database_shared_config
  image: postgres:latest
  environment:
    POSTGRES_PASSWORD: ${DB_ROOT_PASSWORD}
    POSTGRES_DB: ${DB_NAME}
    DB_BE_USER: ${DB_BE_USER}
    DB_BE_PASSWORD: ${DB_BE_PASSWORD}
    DB_REPLICA_USER: ${DB_REPLICA_USER}
    DB_REPLICA_PASSWORD: ${DB_REPLICA_PASSWORD}
    DB_INIT_COMPLETE: 0
  healthcheck:
    test:
      [
        "CMD-SHELL",
        '[ -f /etc/postgresql/db_init_status.env ] && grep -q "DB_INIT_COMPLETE=1" /etc/postgresql/db_init_status.env',
      ]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 20s
    start_interval: 5s
  networks:
    - backend_and_database

services:
  frontend:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.frontend
    ports:
      - 3000:3000
    environment:
      NGINX_HOST: nginx
    depends_on:
      nginx:
        condition: service_healthy

  nginx:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.nginx
    ports:
      - 8000:80
    depends_on:
      backend_1:
        condition: service_healthy
      backend_2:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
      start_interval: 5s
    networks:
      - nginx_and_backend
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  backend_1:
    ports:
      - 8080:80
    <<: *backend_shared_config

  backend_2:
    ports:
      - 8081:80
    <<: *backend_shared_config

  database_primary:
    ports:
      - 5433:5432
    volumes:
      - ../database/shared/init_scripts/ddl.sql:/docker-entrypoint-initdb.d/01-ddl.sql:ro
      - ../database/shared/init_scripts/create_replica_user.sh:/docker-entrypoint-initdb.d/02-create_replica_user.sh:ro
      - ../database/shared/init_scripts/create_backend_user.sh:/docker-entrypoint-initdb.d/03-create_backend_user.sh:ro
      - ../database/shared/init_scripts/finish_init.sh:/docker-entrypoint-initdb.d/04-finish_init.sh:ro

      - ../database/primary/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ../database/primary/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
    <<: *database_shared_config

  database_replica:
    ports:
      - 5434:5432
    depends_on:
      database_primary:
        condition: service_healthy
    volumes:
      - ../database/shared/init_scripts/ddl.sql:/docker-entrypoint-initdb.d/01-ddl.sql:ro
      - ../database/replica/init_scripts/create_subscription.sh:/docker-entrypoint-initdb.d/02-create_subscription.sh:ro
      - ../database/shared/init_scripts/create_replica_user.sh:/docker-entrypoint-initdb.d/03-create_replica_user.sh:ro
      - ../database/shared/init_scripts/create_backend_user.sh:/docker-entrypoint-initdb.d/04-create_backend_user.sh:ro
      - ../database/shared/init_scripts/finish_init.sh:/docker-entrypoint-initdb.d/05-finish_init.sh:ro
    <<: *database_shared_config

  database_cache:
    image: redis:latest
    ports:
      - 6379:6379
    depends_on:
      database_primary:
        condition: service_healthy
      database_replica:
        condition: service_healthy
    networks:
      - backend_and_database
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
      start_interval: 5s
    volumes:
      - ../database/cache/redis.conf:/etc/redis/redis.conf:ro
    command: ["redis-server", "/etc/redis/redis.conf"]

networks:
  nginx_and_backend:
    driver: bridge
  backend_and_database:
    driver: bridge
